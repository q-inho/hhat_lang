program                     = imports* ((fns* main?) / (type_file*)) EOF

imports                     = 'use' '(' (typeimport / fnimport)+ ')'
typeimport                  = 'type' ':' ( single_import / many_import )
fnimport                    = 'fn' ':' ( single_import / many_import )
single_import               = composite_id_with_closure / id
many_import                 = '[' single_import+ ']'

type_file                   = 'type' ( typesingle / typestruct / typeenum / typeunion )
typesingle                  = simple_id ':' id_composite_value
typemember                  = simple_id ':' id_composite_value
typestruct                  = simple_id '{' typemember* '}'
typeenum                    = simple_id '{' enummember* '}'
typeunion                   = simple_id 'union' '{' unionmember* '}'
enummember                  = simple_id / typestruct
unionmember                 = typemember / typestruct / typeenum
type_trait                  = 'trait' id '{' fns* '}'
typespace                   = 'typespace' ( trait_id / id ) '{' fns* '}'

fns                         = 'fn' simple_id fnargs id? fn_body
fnargs                      = '(' argtype* ')'
argtype                     = simple_id ':' id_composite_value
fn_body                     = '{' ( return / declareassign / declareassign_ds / declare / assignargs / assign_ds / assign / expr )* '}'
return                      = "::" expr
id_composite_value          = ( '[' id ']' ) / id

main                        = 'main' body

body                        = '{' ( declareassign / declareassign_ds / declare / assignargs / assign_ds / assign / expr)* '}'
expr                        = cast / callwithargsoptions / callwithbodyoptions / callwithbody / call / array / id / literal
declare                     = simple_id modifier? ':' id
assign                      = id '=' expr
assign_ds                   = id '.' '{' assignargs+ '}'
declareassign               = simple_id modifier? ':' id '=' expr
declareassign_ds            = simple_id modifier? ':' id '=.' '{' assignargs+ '}'
cast                        = ( call / literal / id ) '*' id
call                        = (trait_id '.')? id '(' args ')' modifier?
args                        = ( callargs / cast / call / valonly )*
assignargs                  = ( composite_id / simple_id ) '=' expr
callargs                    = simple_id ':' valonly
valonly                     = array / id / literal
option                      = (( call / array / id ) ':' ( body / expr ))
callwithbodyoptions         = id '(' args ')' '{' option+ '}'
callwithargsoptions         = id '(' option+ ')'
callwithbody                = id '(' args ')' body

array                       = '[' ( literal / composite_id_with_closure / id )* ']'

simple_id                   = r'@?[a-zA-Z][a-zA-Z0-9\-_]*'
composite_id                = simple_id ('.' simple_id)+
composite_id_with_closure   = ( composite_id / simple_id ) '.' '{' ( composite_id_with_closure / composite_id / simple_id )+ '}'
modifier                    = '<' ( valonly+ / callargs+ ) '>'
trait_id                    = simple_id '#' id
id                          = ( composite_id / simple_id ) modifier?

literal                     = float / null / bool / str / int / q__bool / q__int
null                        = 'null'
bool                        = 'true' / 'false'
str                         = r'"([^"]*)"'
int                         = r'-?([1-9]\d*|0)'
float                       = r'-?\d+\.\d+'
q__bool                     = '@true' / '@false'
q__int                      = r'-?\@([1-9]\d*|0)'

comment                     = ( r'\/\/([^\n]*)\n' ) / ( r'\/\-.*?\-\/' )
